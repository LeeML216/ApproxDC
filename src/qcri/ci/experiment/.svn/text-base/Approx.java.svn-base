package qcri.ci.experiment;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Random;

import qcri.ci.ConstraintDiscovery;
import qcri.ci.generaldatastructure.db.Table;
import qcri.ci.instancedriven.ConstraintMining2;
import qcri.ci.utils.Config;
import qcri.ci.utils.FileUtil;

import java.util.*;


public class Approx {

	/**
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {

		String[] datasets = new String[] {
				
				"ExpHospital",
				//"TaxGenerator",
				//"SPStock"
				
				};

			
			for(String dataset: datasets)
			{
				//FileUtil.clearExpReportCSVFile(ExpUtils.head);
				approximate_Varying_NumTuples(dataset);
				//approximate_Varying_NoiseToleranceLevel(dataset);
				//approximate(dataset);
			}	
	}
	
	public static void approximate_Varying_NumTuples(String dataset) throws IOException
	{
		
		int[] numTupless = new int[]{80000};
		for(int numTuples: numTupless)
		{
			Config.noiseLevel = 0.001;
			insertNoise(dataset,numTuples);
			Config.noiseTolerance = Config.noiseLevel * Config.noiseLevel * 6 * 6;
			
			Config.dfsLevel = 5;
			ConstraintDiscovery cd = null;
			cd = new ConstraintMining2("Experiments/" + dataset + "/" + "inputDBNoise",1,3,1,numTuples);
			cd.initHeavyWork(Config.howInit); cd.discover();
		}
		
		String[] prfs = new String[]{"Precision","Recall","F-Measure"};
		for(String prf: prfs)
		{
			int index = 0;
			BufferedReader br = new BufferedReader(new FileReader("Experiments/ExpReport.CSV"));
			String fileName = null;
			
			if(prf.equals("Precision"))
			{
				fileName = ExpUtils.getExpFolder(dataset)+ "X_FixNoiseLevel_VaryingNumTuple_Precision.csv";
			}
			else if(prf.equals("Recall"))
			{
				fileName = ExpUtils.getExpFolder(dataset)+ "X_FixNoiseLevel_VaryingNumTuple_Recall.csv";
			}
			else
			{
				fileName = ExpUtils.getExpFolder(dataset)+ "X_FixNoiseLevel_VaryingNumTuple_FMeasure.csv";
			}
			PrintWriter out = new PrintWriter(new FileWriter(fileName));
			String thisHead = "# Tuples,";
			if(prf.equals("Precision"))
			{
				for(int i = 0 ; i < Config.numTopks; i++)
				{
					thisHead += "G-PrecisionForTop-" + Config.grak * (i+1);
					if( i!= Config.numTopks - 1)
						thisHead += ",";
				}
			}
			else if(prf.equals("Recall"))
			{
				for(int i = 0 ; i < Config.numTopks; i++)
				{
					thisHead += "G-RecallForTop-" + Config.grak * (i+1);
					if( i!= Config.numTopks - 1)
						thisHead += ",";
				}
			}
			else
			{
				for(int i = 0 ; i < Config.numTopks; i++)
				{
					thisHead += "G-F-MeasureForTop-" + Config.grak * (i+1);
					if( i!= Config.numTopks - 1)
						thisHead += ",";
				}
			}
			out.println(thisHead);
			
			String line = null;
			int count = -1;
			while((line = br.readLine()) != null)
			{
				if(count == -1)
				{
					count++;
					continue;
				}
				String[] values = line.split(",");
				StringBuilder sb = new StringBuilder();
				sb.append(numTupless[index] + ",");
				index ++;
				for(int i = 0; i < Config.numTopks; i++)
				{
					
					if(prf.equals("Precision"))
					{
						sb.append(values[10 + i * 2]);
					}
					else if(prf.equals("Recall"))
					{
						sb.append(values[11 + i * 2]);
					}
					else
					{
						double f = 2 * Double.valueOf(values[10 + i * 2]) * Double.valueOf(values[11 + i * 2]) 
								/ (Double.valueOf(values[10 + i * 2]) + Double.valueOf(values[11 + i * 2]));
						sb.append(f);
					}
					
					
					if(i != Config.numTopks - 1)
						sb.append(",");
				}
				out.println(sb);			
			}
			
			br.close();
			out.close();
		}
		
	}
	
	public static void approximate_Varying_NoiseToleranceLevel(String dataset) throws IOException
	{
		//for a fixed num of tuples, compute the pair wise info
		int numTuples = 10000;
		ConstraintDiscovery cd = null;
		cd = new ConstraintMining2("Experiments/" + dataset + "/" + "inputDBNoise",1,3,1,numTuples);
		cd.initHeavyWork(Config.howInit);
		int[] times = new int[]{2,4,6,8,10};
		
		for(int timeIndex = 0; timeIndex < times.length; timeIndex++)
		{
			//Get the exact output
			int time = times[timeIndex];
			
			//Get the approximate output, varying approximate level
			double[] noiseLevels = new double[]{0.001};
			
			
			for(int i = 0; i < noiseLevels.length; i++)
			{
				Config.noiseLevel = noiseLevels[i];
				Config.noiseTolerance = Config.noiseLevel * time * time * Config.noiseLevel;
				//Config.noiseTolerance =  0.00004;
				System.out.println(Config.noiseLevel * time * time * Config.noiseLevel);
				
				Config.dfsLevel = 3;
				
				
				
				/*cd = new ConstraintMining2("Experiments/" + dataset + "/" + "inputDBAll",1,3,1,numTuples);
				cd.initHeavyWork(Config.howInit); cd.discover();*/
				
				Config.howInit = 2;
				//insertNoise(dataset,numTuples);
			
				cd = new ConstraintMining2("Experiments/" + dataset + "/" + "inputDBNoise",1,3,1,numTuples);
				cd.initHeavyWork(Config.howInit); cd.discover();
				
				
			}
		}
		
		//Plot: x: noisy tolerance level   y is the Top-10 pre/recall
		String[] prfs = new String[]{"Precision","Recall","F-Measure"};
		for(String prf: prfs)
		{
			int timeIndex = 0;
			BufferedReader br = new BufferedReader(new FileReader("Experiments/ExpReport.CSV"));
			String fileName = null;
			
			if(prf.equals("Precision"))
			{
				fileName = ExpUtils.getExpFolder(dataset)+ "VaryingNoiseToleranceLevel_10k_Precision.csv";
			}
			else if(prf.equals("Recall"))
			{
				fileName = ExpUtils.getExpFolder(dataset)+ "VaryingNoiseToleranceLevel_10k_Recall.csv";
			}
			else
			{
				fileName = ExpUtils.getExpFolder(dataset)+ "VaryingNoiseToleranceLevel_10k_FMeasure.csv";
			}
			PrintWriter out = new PrintWriter(new FileWriter(fileName));
			String thisHead = "Approx. Level,";
			if(prf.equals("Precision"))
			{
				for(int i = 0 ; i < Config.numTopks; i++)
				{
					thisHead += "G-PrecisionForTop-" + Config.grak * (i+1);
					if( i!= Config.numTopks - 1)
						thisHead += ",";
				}
			}
			else if(prf.equals("Recall"))
			{
				for(int i = 0 ; i < Config.numTopks; i++)
				{
					thisHead += "G-RecallForTop-" + Config.grak * (i+1);
					if( i!= Config.numTopks - 1)
						thisHead += ",";
				}
			}
			else
			{
				for(int i = 0 ; i < Config.numTopks; i++)
				{
					thisHead += "G-F-MeasureForTop-" + Config.grak * (i+1);
					if( i!= Config.numTopks - 1)
						thisHead += ",";
				}
			}
			out.println(thisHead);
			
			String line = null;
			int count = -1;
			while((line = br.readLine()) != null)
			{
				if(count == -1)
				{
					count++;
					continue;
				}
				String[] values = line.split(",");
				StringBuilder sb = new StringBuilder();
				sb.append(0.001 * times[timeIndex] + ",");
				timeIndex ++;
				for(int i = 0; i < Config.numTopks; i++)
				{
					
					if(prf.equals("Precision"))
					{
						sb.append(values[10 + i * 2]);
					}
					else if(prf.equals("Recall"))
					{
						sb.append(values[11 + i * 2]);
					}
					else
					{
						double f = 2 * Double.valueOf(values[10 + i * 2]) * Double.valueOf(values[11 + i * 2]) 
								/ (Double.valueOf(values[10 + i * 2]) + Double.valueOf(values[11 + i * 2]));
						sb.append(f);
					}
					
					
					if(i != Config.numTopks - 1)
						sb.append(",");
				}
				out.println(sb);			
			}
			
			br.close();
			out.close();
		}
		
	}
	
	
	
	
	public static void approximate(String dataset) throws IOException
	{
		//Get the exact output
		ConstraintDiscovery cd = null;
		
		//Get the approximate output, varying approximate level
		double[] noiseLevels = new double[]{0.001};
		
		int numTuples = 10000;
		for(int i = 0; i < noiseLevels.length; i++)
		{
			Config.noiseLevel = noiseLevels[i];
			Config.noiseTolerance =  0.00004;
			System.out.println(Config.noiseLevel * 2 * 2 * Config.noiseLevel);
			
			Config.dfsLevel = 3;
			
			
			
			/*cd = new ConstraintMining2("Experiments/" + dataset + "/" + "inputDBAll",1,3,1,numTuples);
			cd.initHeavyWork(Config.howInit); cd.discover();*/
			
			Config.howInit = 2;
			//insertNoise(dataset,numTuples);
		
			cd = new ConstraintMining2("Experiments/" + dataset + "/" + "inputDBNoise",1,3,1,numTuples);
			cd.initHeavyWork(Config.howInit); cd.discover();
			
			
		}
	
	}
		
		
	

	
	//Randomly insert noise into the tax data generator
	public static void insertNoise(String dataset, int numTuples) throws IOException
	{
		
		String srcFile = "Experiments/" + dataset + "/" + "inputDBAll";
		String desFile = "Experiments/" + dataset + "/" + "inputDBNoise";
		
		
		Table table = new Table(srcFile,numTuples);
		table.insertNoise();
		
		table.dump2File(desFile);
	}

	
}
